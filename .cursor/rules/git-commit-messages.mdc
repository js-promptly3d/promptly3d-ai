When writing Git commit messages, follow the Conventional Commits specification. This creates a clear and explicit commit history that is easy for humans and machines to read.

### Commit Message Structure:
`<type>[optional scope]: <description>`

`[optional body]`

`[optional footer]`

---

### 1. Type
The `type` must be one of the following:
-   **feat**: A new feature for the user.
-   **fix**: A bug fix for the user.
-   **chore**: Routine tasks, maintenance, or dependency updates. No production code changes.
-   **docs**: Changes to documentation only.
-   **style**: Code style changes (e.g., formatting, white-space). No code logic changes.
-   **refactor**: A code change that neither fixes a bug nor adds a feature.
-   **perf**: A code change that improves performance.
-   **test**: Adding missing tests or correcting existing tests.
-   **build**: Changes that affect the build system or external dependencies (e.g., webpack, npm).
-   **ci**: Changes to our CI configuration files and scripts.

### 2. Scope (Optional)
The `scope` provides additional contextual information. It's a noun describing the section of the codebase the commit changes.
-   Examples: `feat(api): ...`, `fix(forms): ...`

### 3. Description
The `description` is a short summary of the code changes.
-   Use the imperative, present tense: "change" not "changed" or "changes".
-   Don't capitalize the first letter.
-   No dot (.) at the end.

### 4. Body (Optional)
The `body` provides additional context, motivation for the change, and contrasts with previous behavior.
-   Use the imperative, present tense.
-   Separate from the description with a blank line.

### 5. Footer (Optional)
The `footer` is for referencing tracking IDs from issue trackers or for noting breaking changes.
-   **Breaking Change:** Start with `BREAKING CHANGE:` followed by a description of the change.

### Examples:

**Commit with `!` to draw attention to breaking change:**
`feat!: send an email to the customer when a product is shipped`

**Commit with scope:**
`feat(lang): add polish language`

**Commit with a body:**
`fix: correct minor typos in spec

see the issue for details on typos fixed`

**Commit with breaking change footer:**
`feat: allow provided config object to extend other configs

BREAKING CHANGE: `extends` key in config file is now used for extending other config files`
